// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/bug/ent/address"
	"entgo.io/bug/ent/company"
	"entgo.io/bug/ent/employeeaddress"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EmployeeAddress is the model entity for the EmployeeAddress schema.
type EmployeeAddress struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// EmployeeID holds the value of the "employee_id" field.
	EmployeeID int `json:"employee_id,omitempty"`
	// AddressID holds the value of the "address_id" field.
	AddressID int `json:"address_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmployeeAddressQuery when eager-loading is set.
	Edges        EmployeeAddressEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EmployeeAddressEdges holds the relations/edges for other nodes in the graph.
type EmployeeAddressEdges struct {
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// Address holds the value of the address edge.
	Address *Address `json:"address,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmployeeAddressEdges) CompanyOrErr() (*Company, error) {
	if e.Company != nil {
		return e.Company, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: company.Label}
	}
	return nil, &NotLoadedError{edge: "company"}
}

// AddressOrErr returns the Address value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmployeeAddressEdges) AddressOrErr() (*Address, error) {
	if e.Address != nil {
		return e.Address, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: address.Label}
	}
	return nil, &NotLoadedError{edge: "address"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmployeeAddress) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case employeeaddress.FieldID, employeeaddress.FieldEmployeeID, employeeaddress.FieldAddressID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmployeeAddress fields.
func (ea *EmployeeAddress) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case employeeaddress.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ea.ID = int(value.Int64)
		case employeeaddress.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field employee_id", values[i])
			} else if value.Valid {
				ea.EmployeeID = int(value.Int64)
			}
		case employeeaddress.FieldAddressID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field address_id", values[i])
			} else if value.Valid {
				ea.AddressID = int(value.Int64)
			}
		default:
			ea.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EmployeeAddress.
// This includes values selected through modifiers, order, etc.
func (ea *EmployeeAddress) Value(name string) (ent.Value, error) {
	return ea.selectValues.Get(name)
}

// QueryCompany queries the "company" edge of the EmployeeAddress entity.
func (ea *EmployeeAddress) QueryCompany() *CompanyQuery {
	return NewEmployeeAddressClient(ea.config).QueryCompany(ea)
}

// QueryAddress queries the "address" edge of the EmployeeAddress entity.
func (ea *EmployeeAddress) QueryAddress() *AddressQuery {
	return NewEmployeeAddressClient(ea.config).QueryAddress(ea)
}

// Update returns a builder for updating this EmployeeAddress.
// Note that you need to call EmployeeAddress.Unwrap() before calling this method if this EmployeeAddress
// was returned from a transaction, and the transaction was committed or rolled back.
func (ea *EmployeeAddress) Update() *EmployeeAddressUpdateOne {
	return NewEmployeeAddressClient(ea.config).UpdateOne(ea)
}

// Unwrap unwraps the EmployeeAddress entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ea *EmployeeAddress) Unwrap() *EmployeeAddress {
	_tx, ok := ea.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmployeeAddress is not a transactional entity")
	}
	ea.config.driver = _tx.drv
	return ea
}

// String implements the fmt.Stringer.
func (ea *EmployeeAddress) String() string {
	var builder strings.Builder
	builder.WriteString("EmployeeAddress(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ea.ID))
	builder.WriteString("employee_id=")
	builder.WriteString(fmt.Sprintf("%v", ea.EmployeeID))
	builder.WriteString(", ")
	builder.WriteString("address_id=")
	builder.WriteString(fmt.Sprintf("%v", ea.AddressID))
	builder.WriteByte(')')
	return builder.String()
}

// EmployeeAddresses is a parsable slice of EmployeeAddress.
type EmployeeAddresses []*EmployeeAddress
