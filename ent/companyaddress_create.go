// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/bug/ent/address"
	"entgo.io/bug/ent/company"
	"entgo.io/bug/ent/companyaddress"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompanyAddressCreate is the builder for creating a CompanyAddress entity.
type CompanyAddressCreate struct {
	config
	mutation *CompanyAddressMutation
	hooks    []Hook
}

// SetCompanyID sets the "company_id" field.
func (cac *CompanyAddressCreate) SetCompanyID(i int) *CompanyAddressCreate {
	cac.mutation.SetCompanyID(i)
	return cac
}

// SetAddressID sets the "address_id" field.
func (cac *CompanyAddressCreate) SetAddressID(i int) *CompanyAddressCreate {
	cac.mutation.SetAddressID(i)
	return cac
}

// SetCompany sets the "company" edge to the Company entity.
func (cac *CompanyAddressCreate) SetCompany(c *Company) *CompanyAddressCreate {
	return cac.SetCompanyID(c.ID)
}

// SetAddress sets the "address" edge to the Address entity.
func (cac *CompanyAddressCreate) SetAddress(a *Address) *CompanyAddressCreate {
	return cac.SetAddressID(a.ID)
}

// Mutation returns the CompanyAddressMutation object of the builder.
func (cac *CompanyAddressCreate) Mutation() *CompanyAddressMutation {
	return cac.mutation
}

// Save creates the CompanyAddress in the database.
func (cac *CompanyAddressCreate) Save(ctx context.Context) (*CompanyAddress, error) {
	return withHooks(ctx, cac.sqlSave, cac.mutation, cac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cac *CompanyAddressCreate) SaveX(ctx context.Context) *CompanyAddress {
	v, err := cac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cac *CompanyAddressCreate) Exec(ctx context.Context) error {
	_, err := cac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cac *CompanyAddressCreate) ExecX(ctx context.Context) {
	if err := cac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cac *CompanyAddressCreate) check() error {
	if _, ok := cac.mutation.CompanyID(); !ok {
		return &ValidationError{Name: "company_id", err: errors.New(`ent: missing required field "CompanyAddress.company_id"`)}
	}
	if _, ok := cac.mutation.AddressID(); !ok {
		return &ValidationError{Name: "address_id", err: errors.New(`ent: missing required field "CompanyAddress.address_id"`)}
	}
	if len(cac.mutation.CompanyIDs()) == 0 {
		return &ValidationError{Name: "company", err: errors.New(`ent: missing required edge "CompanyAddress.company"`)}
	}
	if len(cac.mutation.AddressIDs()) == 0 {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required edge "CompanyAddress.address"`)}
	}
	return nil
}

func (cac *CompanyAddressCreate) sqlSave(ctx context.Context) (*CompanyAddress, error) {
	if err := cac.check(); err != nil {
		return nil, err
	}
	_node, _spec := cac.createSpec()
	if err := sqlgraph.CreateNode(ctx, cac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cac.mutation.id = &_node.ID
	cac.mutation.done = true
	return _node, nil
}

func (cac *CompanyAddressCreate) createSpec() (*CompanyAddress, *sqlgraph.CreateSpec) {
	var (
		_node = &CompanyAddress{config: cac.config}
		_spec = sqlgraph.NewCreateSpec(companyaddress.Table, sqlgraph.NewFieldSpec(companyaddress.FieldID, field.TypeInt))
	)
	if nodes := cac.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   companyaddress.CompanyTable,
			Columns: []string{companyaddress.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CompanyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cac.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   companyaddress.AddressTable,
			Columns: []string{companyaddress.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AddressID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CompanyAddressCreateBulk is the builder for creating many CompanyAddress entities in bulk.
type CompanyAddressCreateBulk struct {
	config
	err      error
	builders []*CompanyAddressCreate
}

// Save creates the CompanyAddress entities in the database.
func (cacb *CompanyAddressCreateBulk) Save(ctx context.Context) ([]*CompanyAddress, error) {
	if cacb.err != nil {
		return nil, cacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cacb.builders))
	nodes := make([]*CompanyAddress, len(cacb.builders))
	mutators := make([]Mutator, len(cacb.builders))
	for i := range cacb.builders {
		func(i int, root context.Context) {
			builder := cacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CompanyAddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cacb *CompanyAddressCreateBulk) SaveX(ctx context.Context) []*CompanyAddress {
	v, err := cacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cacb *CompanyAddressCreateBulk) Exec(ctx context.Context) error {
	_, err := cacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cacb *CompanyAddressCreateBulk) ExecX(ctx context.Context) {
	if err := cacb.Exec(ctx); err != nil {
		panic(err)
	}
}
