// Code generated by ent, DO NOT EDIT.

package employee

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the employee type in the database.
	Label = "employee"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFirstname holds the string denoting the firstname field in the database.
	FieldFirstname = "firstname"
	// FieldLastname holds the string denoting the lastname field in the database.
	FieldLastname = "lastname"
	// EdgeAddress holds the string denoting the address edge name in mutations.
	EdgeAddress = "address"
	// EdgeEmployeeAddresses holds the string denoting the employee_addresses edge name in mutations.
	EdgeEmployeeAddresses = "employee_addresses"
	// Table holds the table name of the employee in the database.
	Table = "employees"
	// AddressTable is the table that holds the address relation/edge. The primary key declared below.
	AddressTable = "employee_addresses"
	// AddressInverseTable is the table name for the Address entity.
	// It exists in this package in order to avoid circular dependency with the "address" package.
	AddressInverseTable = "addresses"
	// EmployeeAddressesTable is the table that holds the employee_addresses relation/edge.
	EmployeeAddressesTable = "employee_addresses"
	// EmployeeAddressesInverseTable is the table name for the EmployeeAddress entity.
	// It exists in this package in order to avoid circular dependency with the "employeeaddress" package.
	EmployeeAddressesInverseTable = "employee_addresses"
	// EmployeeAddressesColumn is the table column denoting the employee_addresses relation/edge.
	EmployeeAddressesColumn = "employee_id"
)

// Columns holds all SQL columns for employee fields.
var Columns = []string{
	FieldID,
	FieldFirstname,
	FieldLastname,
}

var (
	// AddressPrimaryKey and AddressColumn2 are the table columns denoting the
	// primary key for the address relation (M2M).
	AddressPrimaryKey = []string{"address_id", "employee_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Employee queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFirstname orders the results by the firstname field.
func ByFirstname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstname, opts...).ToFunc()
}

// ByLastname orders the results by the lastname field.
func ByLastname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastname, opts...).ToFunc()
}

// ByAddressCount orders the results by address count.
func ByAddressCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAddressStep(), opts...)
	}
}

// ByAddress orders the results by address terms.
func ByAddress(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAddressStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEmployeeAddressesCount orders the results by employee_addresses count.
func ByEmployeeAddressesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEmployeeAddressesStep(), opts...)
	}
}

// ByEmployeeAddresses orders the results by employee_addresses terms.
func ByEmployeeAddresses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmployeeAddressesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAddressStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AddressInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, AddressTable, AddressPrimaryKey...),
	)
}
func newEmployeeAddressesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmployeeAddressesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, EmployeeAddressesTable, EmployeeAddressesColumn),
	)
}
