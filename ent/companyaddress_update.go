// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/bug/ent/address"
	"entgo.io/bug/ent/company"
	"entgo.io/bug/ent/companyaddress"
	"entgo.io/bug/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompanyAddressUpdate is the builder for updating CompanyAddress entities.
type CompanyAddressUpdate struct {
	config
	hooks    []Hook
	mutation *CompanyAddressMutation
}

// Where appends a list predicates to the CompanyAddressUpdate builder.
func (cau *CompanyAddressUpdate) Where(ps ...predicate.CompanyAddress) *CompanyAddressUpdate {
	cau.mutation.Where(ps...)
	return cau
}

// SetCompanyID sets the "company_id" field.
func (cau *CompanyAddressUpdate) SetCompanyID(i int) *CompanyAddressUpdate {
	cau.mutation.SetCompanyID(i)
	return cau
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (cau *CompanyAddressUpdate) SetNillableCompanyID(i *int) *CompanyAddressUpdate {
	if i != nil {
		cau.SetCompanyID(*i)
	}
	return cau
}

// SetAddressID sets the "address_id" field.
func (cau *CompanyAddressUpdate) SetAddressID(i int) *CompanyAddressUpdate {
	cau.mutation.SetAddressID(i)
	return cau
}

// SetNillableAddressID sets the "address_id" field if the given value is not nil.
func (cau *CompanyAddressUpdate) SetNillableAddressID(i *int) *CompanyAddressUpdate {
	if i != nil {
		cau.SetAddressID(*i)
	}
	return cau
}

// SetCompany sets the "company" edge to the Company entity.
func (cau *CompanyAddressUpdate) SetCompany(c *Company) *CompanyAddressUpdate {
	return cau.SetCompanyID(c.ID)
}

// SetAddress sets the "address" edge to the Address entity.
func (cau *CompanyAddressUpdate) SetAddress(a *Address) *CompanyAddressUpdate {
	return cau.SetAddressID(a.ID)
}

// Mutation returns the CompanyAddressMutation object of the builder.
func (cau *CompanyAddressUpdate) Mutation() *CompanyAddressMutation {
	return cau.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (cau *CompanyAddressUpdate) ClearCompany() *CompanyAddressUpdate {
	cau.mutation.ClearCompany()
	return cau
}

// ClearAddress clears the "address" edge to the Address entity.
func (cau *CompanyAddressUpdate) ClearAddress() *CompanyAddressUpdate {
	cau.mutation.ClearAddress()
	return cau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cau *CompanyAddressUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cau.sqlSave, cau.mutation, cau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cau *CompanyAddressUpdate) SaveX(ctx context.Context) int {
	affected, err := cau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cau *CompanyAddressUpdate) Exec(ctx context.Context) error {
	_, err := cau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cau *CompanyAddressUpdate) ExecX(ctx context.Context) {
	if err := cau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cau *CompanyAddressUpdate) check() error {
	if cau.mutation.CompanyCleared() && len(cau.mutation.CompanyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CompanyAddress.company"`)
	}
	if cau.mutation.AddressCleared() && len(cau.mutation.AddressIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CompanyAddress.address"`)
	}
	return nil
}

func (cau *CompanyAddressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(companyaddress.Table, companyaddress.Columns, sqlgraph.NewFieldSpec(companyaddress.FieldID, field.TypeInt))
	if ps := cau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cau.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   companyaddress.CompanyTable,
			Columns: []string{companyaddress.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cau.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   companyaddress.CompanyTable,
			Columns: []string{companyaddress.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cau.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   companyaddress.AddressTable,
			Columns: []string{companyaddress.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cau.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   companyaddress.AddressTable,
			Columns: []string{companyaddress.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{companyaddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cau.mutation.done = true
	return n, nil
}

// CompanyAddressUpdateOne is the builder for updating a single CompanyAddress entity.
type CompanyAddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompanyAddressMutation
}

// SetCompanyID sets the "company_id" field.
func (cauo *CompanyAddressUpdateOne) SetCompanyID(i int) *CompanyAddressUpdateOne {
	cauo.mutation.SetCompanyID(i)
	return cauo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (cauo *CompanyAddressUpdateOne) SetNillableCompanyID(i *int) *CompanyAddressUpdateOne {
	if i != nil {
		cauo.SetCompanyID(*i)
	}
	return cauo
}

// SetAddressID sets the "address_id" field.
func (cauo *CompanyAddressUpdateOne) SetAddressID(i int) *CompanyAddressUpdateOne {
	cauo.mutation.SetAddressID(i)
	return cauo
}

// SetNillableAddressID sets the "address_id" field if the given value is not nil.
func (cauo *CompanyAddressUpdateOne) SetNillableAddressID(i *int) *CompanyAddressUpdateOne {
	if i != nil {
		cauo.SetAddressID(*i)
	}
	return cauo
}

// SetCompany sets the "company" edge to the Company entity.
func (cauo *CompanyAddressUpdateOne) SetCompany(c *Company) *CompanyAddressUpdateOne {
	return cauo.SetCompanyID(c.ID)
}

// SetAddress sets the "address" edge to the Address entity.
func (cauo *CompanyAddressUpdateOne) SetAddress(a *Address) *CompanyAddressUpdateOne {
	return cauo.SetAddressID(a.ID)
}

// Mutation returns the CompanyAddressMutation object of the builder.
func (cauo *CompanyAddressUpdateOne) Mutation() *CompanyAddressMutation {
	return cauo.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (cauo *CompanyAddressUpdateOne) ClearCompany() *CompanyAddressUpdateOne {
	cauo.mutation.ClearCompany()
	return cauo
}

// ClearAddress clears the "address" edge to the Address entity.
func (cauo *CompanyAddressUpdateOne) ClearAddress() *CompanyAddressUpdateOne {
	cauo.mutation.ClearAddress()
	return cauo
}

// Where appends a list predicates to the CompanyAddressUpdate builder.
func (cauo *CompanyAddressUpdateOne) Where(ps ...predicate.CompanyAddress) *CompanyAddressUpdateOne {
	cauo.mutation.Where(ps...)
	return cauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cauo *CompanyAddressUpdateOne) Select(field string, fields ...string) *CompanyAddressUpdateOne {
	cauo.fields = append([]string{field}, fields...)
	return cauo
}

// Save executes the query and returns the updated CompanyAddress entity.
func (cauo *CompanyAddressUpdateOne) Save(ctx context.Context) (*CompanyAddress, error) {
	return withHooks(ctx, cauo.sqlSave, cauo.mutation, cauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cauo *CompanyAddressUpdateOne) SaveX(ctx context.Context) *CompanyAddress {
	node, err := cauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cauo *CompanyAddressUpdateOne) Exec(ctx context.Context) error {
	_, err := cauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cauo *CompanyAddressUpdateOne) ExecX(ctx context.Context) {
	if err := cauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cauo *CompanyAddressUpdateOne) check() error {
	if cauo.mutation.CompanyCleared() && len(cauo.mutation.CompanyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CompanyAddress.company"`)
	}
	if cauo.mutation.AddressCleared() && len(cauo.mutation.AddressIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CompanyAddress.address"`)
	}
	return nil
}

func (cauo *CompanyAddressUpdateOne) sqlSave(ctx context.Context) (_node *CompanyAddress, err error) {
	if err := cauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(companyaddress.Table, companyaddress.Columns, sqlgraph.NewFieldSpec(companyaddress.FieldID, field.TypeInt))
	id, ok := cauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CompanyAddress.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, companyaddress.FieldID)
		for _, f := range fields {
			if !companyaddress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != companyaddress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cauo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   companyaddress.CompanyTable,
			Columns: []string{companyaddress.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cauo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   companyaddress.CompanyTable,
			Columns: []string{companyaddress.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cauo.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   companyaddress.AddressTable,
			Columns: []string{companyaddress.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cauo.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   companyaddress.AddressTable,
			Columns: []string{companyaddress.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CompanyAddress{config: cauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{companyaddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cauo.mutation.done = true
	return _node, nil
}
