// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/bug/ent/address"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Address is the model entity for the Address schema.
type Address struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Street holds the value of the "street" field.
	Street string `json:"street,omitempty"`
	// HouseNumber holds the value of the "house_number" field.
	HouseNumber string `json:"house_number,omitempty"`
	// PostalCode holds the value of the "postal_code" field.
	PostalCode string `json:"postal_code,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AddressQuery when eager-loading is set.
	Edges        AddressEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AddressEdges holds the relations/edges for other nodes in the graph.
type AddressEdges struct {
	// Companies holds the value of the companies edge.
	Companies []*Company `json:"companies,omitempty"`
	// Employees holds the value of the employees edge.
	Employees []*Employee `json:"employees,omitempty"`
	// CompanyAddresses holds the value of the company_addresses edge.
	CompanyAddresses []*CompanyAddress `json:"company_addresses,omitempty"`
	// EmployeeAddresses holds the value of the employee_addresses edge.
	EmployeeAddresses []*EmployeeAddress `json:"employee_addresses,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// CompaniesOrErr returns the Companies value or an error if the edge
// was not loaded in eager-loading.
func (e AddressEdges) CompaniesOrErr() ([]*Company, error) {
	if e.loadedTypes[0] {
		return e.Companies, nil
	}
	return nil, &NotLoadedError{edge: "companies"}
}

// EmployeesOrErr returns the Employees value or an error if the edge
// was not loaded in eager-loading.
func (e AddressEdges) EmployeesOrErr() ([]*Employee, error) {
	if e.loadedTypes[1] {
		return e.Employees, nil
	}
	return nil, &NotLoadedError{edge: "employees"}
}

// CompanyAddressesOrErr returns the CompanyAddresses value or an error if the edge
// was not loaded in eager-loading.
func (e AddressEdges) CompanyAddressesOrErr() ([]*CompanyAddress, error) {
	if e.loadedTypes[2] {
		return e.CompanyAddresses, nil
	}
	return nil, &NotLoadedError{edge: "company_addresses"}
}

// EmployeeAddressesOrErr returns the EmployeeAddresses value or an error if the edge
// was not loaded in eager-loading.
func (e AddressEdges) EmployeeAddressesOrErr() ([]*EmployeeAddress, error) {
	if e.loadedTypes[3] {
		return e.EmployeeAddresses, nil
	}
	return nil, &NotLoadedError{edge: "employee_addresses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Address) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case address.FieldID:
			values[i] = new(sql.NullInt64)
		case address.FieldStreet, address.FieldHouseNumber, address.FieldPostalCode, address.FieldCity:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Address fields.
func (a *Address) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case address.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case address.FieldStreet:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field street", values[i])
			} else if value.Valid {
				a.Street = value.String
			}
		case address.FieldHouseNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field house_number", values[i])
			} else if value.Valid {
				a.HouseNumber = value.String
			}
		case address.FieldPostalCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field postal_code", values[i])
			} else if value.Valid {
				a.PostalCode = value.String
			}
		case address.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				a.City = value.String
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Address.
// This includes values selected through modifiers, order, etc.
func (a *Address) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryCompanies queries the "companies" edge of the Address entity.
func (a *Address) QueryCompanies() *CompanyQuery {
	return NewAddressClient(a.config).QueryCompanies(a)
}

// QueryEmployees queries the "employees" edge of the Address entity.
func (a *Address) QueryEmployees() *EmployeeQuery {
	return NewAddressClient(a.config).QueryEmployees(a)
}

// QueryCompanyAddresses queries the "company_addresses" edge of the Address entity.
func (a *Address) QueryCompanyAddresses() *CompanyAddressQuery {
	return NewAddressClient(a.config).QueryCompanyAddresses(a)
}

// QueryEmployeeAddresses queries the "employee_addresses" edge of the Address entity.
func (a *Address) QueryEmployeeAddresses() *EmployeeAddressQuery {
	return NewAddressClient(a.config).QueryEmployeeAddresses(a)
}

// Update returns a builder for updating this Address.
// Note that you need to call Address.Unwrap() before calling this method if this Address
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Address) Update() *AddressUpdateOne {
	return NewAddressClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Address entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Address) Unwrap() *Address {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Address is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Address) String() string {
	var builder strings.Builder
	builder.WriteString("Address(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("street=")
	builder.WriteString(a.Street)
	builder.WriteString(", ")
	builder.WriteString("house_number=")
	builder.WriteString(a.HouseNumber)
	builder.WriteString(", ")
	builder.WriteString("postal_code=")
	builder.WriteString(a.PostalCode)
	builder.WriteString(", ")
	builder.WriteString("city=")
	builder.WriteString(a.City)
	builder.WriteByte(')')
	return builder.String()
}

// Addresses is a parsable slice of Address.
type Addresses []*Address
