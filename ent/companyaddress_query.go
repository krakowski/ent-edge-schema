// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/bug/ent/address"
	"entgo.io/bug/ent/company"
	"entgo.io/bug/ent/companyaddress"
	"entgo.io/bug/ent/predicate"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompanyAddressQuery is the builder for querying CompanyAddress entities.
type CompanyAddressQuery struct {
	config
	ctx         *QueryContext
	order       []companyaddress.OrderOption
	inters      []Interceptor
	predicates  []predicate.CompanyAddress
	withCompany *CompanyQuery
	withAddress *AddressQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CompanyAddressQuery builder.
func (caq *CompanyAddressQuery) Where(ps ...predicate.CompanyAddress) *CompanyAddressQuery {
	caq.predicates = append(caq.predicates, ps...)
	return caq
}

// Limit the number of records to be returned by this query.
func (caq *CompanyAddressQuery) Limit(limit int) *CompanyAddressQuery {
	caq.ctx.Limit = &limit
	return caq
}

// Offset to start from.
func (caq *CompanyAddressQuery) Offset(offset int) *CompanyAddressQuery {
	caq.ctx.Offset = &offset
	return caq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (caq *CompanyAddressQuery) Unique(unique bool) *CompanyAddressQuery {
	caq.ctx.Unique = &unique
	return caq
}

// Order specifies how the records should be ordered.
func (caq *CompanyAddressQuery) Order(o ...companyaddress.OrderOption) *CompanyAddressQuery {
	caq.order = append(caq.order, o...)
	return caq
}

// QueryCompany chains the current query on the "company" edge.
func (caq *CompanyAddressQuery) QueryCompany() *CompanyQuery {
	query := (&CompanyClient{config: caq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := caq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := caq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(companyaddress.Table, companyaddress.FieldID, selector),
			sqlgraph.To(company.Table, company.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, companyaddress.CompanyTable, companyaddress.CompanyColumn),
		)
		fromU = sqlgraph.SetNeighbors(caq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAddress chains the current query on the "address" edge.
func (caq *CompanyAddressQuery) QueryAddress() *AddressQuery {
	query := (&AddressClient{config: caq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := caq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := caq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(companyaddress.Table, companyaddress.FieldID, selector),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, companyaddress.AddressTable, companyaddress.AddressColumn),
		)
		fromU = sqlgraph.SetNeighbors(caq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CompanyAddress entity from the query.
// Returns a *NotFoundError when no CompanyAddress was found.
func (caq *CompanyAddressQuery) First(ctx context.Context) (*CompanyAddress, error) {
	nodes, err := caq.Limit(1).All(setContextOp(ctx, caq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{companyaddress.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (caq *CompanyAddressQuery) FirstX(ctx context.Context) *CompanyAddress {
	node, err := caq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CompanyAddress ID from the query.
// Returns a *NotFoundError when no CompanyAddress ID was found.
func (caq *CompanyAddressQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = caq.Limit(1).IDs(setContextOp(ctx, caq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{companyaddress.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (caq *CompanyAddressQuery) FirstIDX(ctx context.Context) int {
	id, err := caq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CompanyAddress entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CompanyAddress entity is found.
// Returns a *NotFoundError when no CompanyAddress entities are found.
func (caq *CompanyAddressQuery) Only(ctx context.Context) (*CompanyAddress, error) {
	nodes, err := caq.Limit(2).All(setContextOp(ctx, caq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{companyaddress.Label}
	default:
		return nil, &NotSingularError{companyaddress.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (caq *CompanyAddressQuery) OnlyX(ctx context.Context) *CompanyAddress {
	node, err := caq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CompanyAddress ID in the query.
// Returns a *NotSingularError when more than one CompanyAddress ID is found.
// Returns a *NotFoundError when no entities are found.
func (caq *CompanyAddressQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = caq.Limit(2).IDs(setContextOp(ctx, caq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{companyaddress.Label}
	default:
		err = &NotSingularError{companyaddress.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (caq *CompanyAddressQuery) OnlyIDX(ctx context.Context) int {
	id, err := caq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CompanyAddresses.
func (caq *CompanyAddressQuery) All(ctx context.Context) ([]*CompanyAddress, error) {
	ctx = setContextOp(ctx, caq.ctx, ent.OpQueryAll)
	if err := caq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CompanyAddress, *CompanyAddressQuery]()
	return withInterceptors[[]*CompanyAddress](ctx, caq, qr, caq.inters)
}

// AllX is like All, but panics if an error occurs.
func (caq *CompanyAddressQuery) AllX(ctx context.Context) []*CompanyAddress {
	nodes, err := caq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CompanyAddress IDs.
func (caq *CompanyAddressQuery) IDs(ctx context.Context) (ids []int, err error) {
	if caq.ctx.Unique == nil && caq.path != nil {
		caq.Unique(true)
	}
	ctx = setContextOp(ctx, caq.ctx, ent.OpQueryIDs)
	if err = caq.Select(companyaddress.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (caq *CompanyAddressQuery) IDsX(ctx context.Context) []int {
	ids, err := caq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (caq *CompanyAddressQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, caq.ctx, ent.OpQueryCount)
	if err := caq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, caq, querierCount[*CompanyAddressQuery](), caq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (caq *CompanyAddressQuery) CountX(ctx context.Context) int {
	count, err := caq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (caq *CompanyAddressQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, caq.ctx, ent.OpQueryExist)
	switch _, err := caq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (caq *CompanyAddressQuery) ExistX(ctx context.Context) bool {
	exist, err := caq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CompanyAddressQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (caq *CompanyAddressQuery) Clone() *CompanyAddressQuery {
	if caq == nil {
		return nil
	}
	return &CompanyAddressQuery{
		config:      caq.config,
		ctx:         caq.ctx.Clone(),
		order:       append([]companyaddress.OrderOption{}, caq.order...),
		inters:      append([]Interceptor{}, caq.inters...),
		predicates:  append([]predicate.CompanyAddress{}, caq.predicates...),
		withCompany: caq.withCompany.Clone(),
		withAddress: caq.withAddress.Clone(),
		// clone intermediate query.
		sql:  caq.sql.Clone(),
		path: caq.path,
	}
}

// WithCompany tells the query-builder to eager-load the nodes that are connected to
// the "company" edge. The optional arguments are used to configure the query builder of the edge.
func (caq *CompanyAddressQuery) WithCompany(opts ...func(*CompanyQuery)) *CompanyAddressQuery {
	query := (&CompanyClient{config: caq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	caq.withCompany = query
	return caq
}

// WithAddress tells the query-builder to eager-load the nodes that are connected to
// the "address" edge. The optional arguments are used to configure the query builder of the edge.
func (caq *CompanyAddressQuery) WithAddress(opts ...func(*AddressQuery)) *CompanyAddressQuery {
	query := (&AddressClient{config: caq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	caq.withAddress = query
	return caq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CompanyID int `json:"company_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CompanyAddress.Query().
//		GroupBy(companyaddress.FieldCompanyID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (caq *CompanyAddressQuery) GroupBy(field string, fields ...string) *CompanyAddressGroupBy {
	caq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CompanyAddressGroupBy{build: caq}
	grbuild.flds = &caq.ctx.Fields
	grbuild.label = companyaddress.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CompanyID int `json:"company_id,omitempty"`
//	}
//
//	client.CompanyAddress.Query().
//		Select(companyaddress.FieldCompanyID).
//		Scan(ctx, &v)
func (caq *CompanyAddressQuery) Select(fields ...string) *CompanyAddressSelect {
	caq.ctx.Fields = append(caq.ctx.Fields, fields...)
	sbuild := &CompanyAddressSelect{CompanyAddressQuery: caq}
	sbuild.label = companyaddress.Label
	sbuild.flds, sbuild.scan = &caq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CompanyAddressSelect configured with the given aggregations.
func (caq *CompanyAddressQuery) Aggregate(fns ...AggregateFunc) *CompanyAddressSelect {
	return caq.Select().Aggregate(fns...)
}

func (caq *CompanyAddressQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range caq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, caq); err != nil {
				return err
			}
		}
	}
	for _, f := range caq.ctx.Fields {
		if !companyaddress.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if caq.path != nil {
		prev, err := caq.path(ctx)
		if err != nil {
			return err
		}
		caq.sql = prev
	}
	return nil
}

func (caq *CompanyAddressQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CompanyAddress, error) {
	var (
		nodes       = []*CompanyAddress{}
		_spec       = caq.querySpec()
		loadedTypes = [2]bool{
			caq.withCompany != nil,
			caq.withAddress != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CompanyAddress).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CompanyAddress{config: caq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, caq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := caq.withCompany; query != nil {
		if err := caq.loadCompany(ctx, query, nodes, nil,
			func(n *CompanyAddress, e *Company) { n.Edges.Company = e }); err != nil {
			return nil, err
		}
	}
	if query := caq.withAddress; query != nil {
		if err := caq.loadAddress(ctx, query, nodes, nil,
			func(n *CompanyAddress, e *Address) { n.Edges.Address = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (caq *CompanyAddressQuery) loadCompany(ctx context.Context, query *CompanyQuery, nodes []*CompanyAddress, init func(*CompanyAddress), assign func(*CompanyAddress, *Company)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CompanyAddress)
	for i := range nodes {
		fk := nodes[i].CompanyID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(company.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "company_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (caq *CompanyAddressQuery) loadAddress(ctx context.Context, query *AddressQuery, nodes []*CompanyAddress, init func(*CompanyAddress), assign func(*CompanyAddress, *Address)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CompanyAddress)
	for i := range nodes {
		fk := nodes[i].AddressID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(address.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "address_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (caq *CompanyAddressQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := caq.querySpec()
	_spec.Node.Columns = caq.ctx.Fields
	if len(caq.ctx.Fields) > 0 {
		_spec.Unique = caq.ctx.Unique != nil && *caq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, caq.driver, _spec)
}

func (caq *CompanyAddressQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(companyaddress.Table, companyaddress.Columns, sqlgraph.NewFieldSpec(companyaddress.FieldID, field.TypeInt))
	_spec.From = caq.sql
	if unique := caq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if caq.path != nil {
		_spec.Unique = true
	}
	if fields := caq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, companyaddress.FieldID)
		for i := range fields {
			if fields[i] != companyaddress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if caq.withCompany != nil {
			_spec.Node.AddColumnOnce(companyaddress.FieldCompanyID)
		}
		if caq.withAddress != nil {
			_spec.Node.AddColumnOnce(companyaddress.FieldAddressID)
		}
	}
	if ps := caq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := caq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := caq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := caq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (caq *CompanyAddressQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(caq.driver.Dialect())
	t1 := builder.Table(companyaddress.Table)
	columns := caq.ctx.Fields
	if len(columns) == 0 {
		columns = companyaddress.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if caq.sql != nil {
		selector = caq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if caq.ctx.Unique != nil && *caq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range caq.predicates {
		p(selector)
	}
	for _, p := range caq.order {
		p(selector)
	}
	if offset := caq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := caq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CompanyAddressGroupBy is the group-by builder for CompanyAddress entities.
type CompanyAddressGroupBy struct {
	selector
	build *CompanyAddressQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cagb *CompanyAddressGroupBy) Aggregate(fns ...AggregateFunc) *CompanyAddressGroupBy {
	cagb.fns = append(cagb.fns, fns...)
	return cagb
}

// Scan applies the selector query and scans the result into the given value.
func (cagb *CompanyAddressGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cagb.build.ctx, ent.OpQueryGroupBy)
	if err := cagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CompanyAddressQuery, *CompanyAddressGroupBy](ctx, cagb.build, cagb, cagb.build.inters, v)
}

func (cagb *CompanyAddressGroupBy) sqlScan(ctx context.Context, root *CompanyAddressQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cagb.fns))
	for _, fn := range cagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cagb.flds)+len(cagb.fns))
		for _, f := range *cagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CompanyAddressSelect is the builder for selecting fields of CompanyAddress entities.
type CompanyAddressSelect struct {
	*CompanyAddressQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cas *CompanyAddressSelect) Aggregate(fns ...AggregateFunc) *CompanyAddressSelect {
	cas.fns = append(cas.fns, fns...)
	return cas
}

// Scan applies the selector query and scans the result into the given value.
func (cas *CompanyAddressSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cas.ctx, ent.OpQuerySelect)
	if err := cas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CompanyAddressQuery, *CompanyAddressSelect](ctx, cas.CompanyAddressQuery, cas, cas.inters, v)
}

func (cas *CompanyAddressSelect) sqlScan(ctx context.Context, root *CompanyAddressQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cas.fns))
	for _, fn := range cas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
