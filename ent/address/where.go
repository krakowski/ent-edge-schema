// Code generated by ent, DO NOT EDIT.

package address

import (
	"entgo.io/bug/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldID, id))
}

// Street applies equality check predicate on the "street" field. It's identical to StreetEQ.
func Street(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldStreet, v))
}

// HouseNumber applies equality check predicate on the "house_number" field. It's identical to HouseNumberEQ.
func HouseNumber(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldHouseNumber, v))
}

// PostalCode applies equality check predicate on the "postal_code" field. It's identical to PostalCodeEQ.
func PostalCode(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldPostalCode, v))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCity, v))
}

// StreetEQ applies the EQ predicate on the "street" field.
func StreetEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldStreet, v))
}

// StreetNEQ applies the NEQ predicate on the "street" field.
func StreetNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldStreet, v))
}

// StreetIn applies the In predicate on the "street" field.
func StreetIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldStreet, vs...))
}

// StreetNotIn applies the NotIn predicate on the "street" field.
func StreetNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldStreet, vs...))
}

// StreetGT applies the GT predicate on the "street" field.
func StreetGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldStreet, v))
}

// StreetGTE applies the GTE predicate on the "street" field.
func StreetGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldStreet, v))
}

// StreetLT applies the LT predicate on the "street" field.
func StreetLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldStreet, v))
}

// StreetLTE applies the LTE predicate on the "street" field.
func StreetLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldStreet, v))
}

// StreetContains applies the Contains predicate on the "street" field.
func StreetContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldStreet, v))
}

// StreetHasPrefix applies the HasPrefix predicate on the "street" field.
func StreetHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldStreet, v))
}

// StreetHasSuffix applies the HasSuffix predicate on the "street" field.
func StreetHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldStreet, v))
}

// StreetEqualFold applies the EqualFold predicate on the "street" field.
func StreetEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldStreet, v))
}

// StreetContainsFold applies the ContainsFold predicate on the "street" field.
func StreetContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldStreet, v))
}

// HouseNumberEQ applies the EQ predicate on the "house_number" field.
func HouseNumberEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldHouseNumber, v))
}

// HouseNumberNEQ applies the NEQ predicate on the "house_number" field.
func HouseNumberNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldHouseNumber, v))
}

// HouseNumberIn applies the In predicate on the "house_number" field.
func HouseNumberIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldHouseNumber, vs...))
}

// HouseNumberNotIn applies the NotIn predicate on the "house_number" field.
func HouseNumberNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldHouseNumber, vs...))
}

// HouseNumberGT applies the GT predicate on the "house_number" field.
func HouseNumberGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldHouseNumber, v))
}

// HouseNumberGTE applies the GTE predicate on the "house_number" field.
func HouseNumberGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldHouseNumber, v))
}

// HouseNumberLT applies the LT predicate on the "house_number" field.
func HouseNumberLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldHouseNumber, v))
}

// HouseNumberLTE applies the LTE predicate on the "house_number" field.
func HouseNumberLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldHouseNumber, v))
}

// HouseNumberContains applies the Contains predicate on the "house_number" field.
func HouseNumberContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldHouseNumber, v))
}

// HouseNumberHasPrefix applies the HasPrefix predicate on the "house_number" field.
func HouseNumberHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldHouseNumber, v))
}

// HouseNumberHasSuffix applies the HasSuffix predicate on the "house_number" field.
func HouseNumberHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldHouseNumber, v))
}

// HouseNumberEqualFold applies the EqualFold predicate on the "house_number" field.
func HouseNumberEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldHouseNumber, v))
}

// HouseNumberContainsFold applies the ContainsFold predicate on the "house_number" field.
func HouseNumberContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldHouseNumber, v))
}

// PostalCodeEQ applies the EQ predicate on the "postal_code" field.
func PostalCodeEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldPostalCode, v))
}

// PostalCodeNEQ applies the NEQ predicate on the "postal_code" field.
func PostalCodeNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldPostalCode, v))
}

// PostalCodeIn applies the In predicate on the "postal_code" field.
func PostalCodeIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldPostalCode, vs...))
}

// PostalCodeNotIn applies the NotIn predicate on the "postal_code" field.
func PostalCodeNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldPostalCode, vs...))
}

// PostalCodeGT applies the GT predicate on the "postal_code" field.
func PostalCodeGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldPostalCode, v))
}

// PostalCodeGTE applies the GTE predicate on the "postal_code" field.
func PostalCodeGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldPostalCode, v))
}

// PostalCodeLT applies the LT predicate on the "postal_code" field.
func PostalCodeLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldPostalCode, v))
}

// PostalCodeLTE applies the LTE predicate on the "postal_code" field.
func PostalCodeLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldPostalCode, v))
}

// PostalCodeContains applies the Contains predicate on the "postal_code" field.
func PostalCodeContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldPostalCode, v))
}

// PostalCodeHasPrefix applies the HasPrefix predicate on the "postal_code" field.
func PostalCodeHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldPostalCode, v))
}

// PostalCodeHasSuffix applies the HasSuffix predicate on the "postal_code" field.
func PostalCodeHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldPostalCode, v))
}

// PostalCodeEqualFold applies the EqualFold predicate on the "postal_code" field.
func PostalCodeEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldPostalCode, v))
}

// PostalCodeContainsFold applies the ContainsFold predicate on the "postal_code" field.
func PostalCodeContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldPostalCode, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldCity, v))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldCity, v))
}

// HasCompanies applies the HasEdge predicate on the "companies" edge.
func HasCompanies() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, CompaniesTable, CompaniesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompaniesWith applies the HasEdge predicate on the "companies" edge with a given conditions (other predicates).
func HasCompaniesWith(preds ...predicate.Company) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newCompaniesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmployees applies the HasEdge predicate on the "employees" edge.
func HasEmployees() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, EmployeesTable, EmployeesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeesWith applies the HasEdge predicate on the "employees" edge with a given conditions (other predicates).
func HasEmployeesWith(preds ...predicate.Employee) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newEmployeesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCompanyAddresses applies the HasEdge predicate on the "company_addresses" edge.
func HasCompanyAddresses() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, CompanyAddressesTable, CompanyAddressesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompanyAddressesWith applies the HasEdge predicate on the "company_addresses" edge with a given conditions (other predicates).
func HasCompanyAddressesWith(preds ...predicate.CompanyAddress) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newCompanyAddressesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmployeeAddresses applies the HasEdge predicate on the "employee_addresses" edge.
func HasEmployeeAddresses() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, EmployeeAddressesTable, EmployeeAddressesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeeAddressesWith applies the HasEdge predicate on the "employee_addresses" edge with a given conditions (other predicates).
func HasEmployeeAddressesWith(preds ...predicate.EmployeeAddress) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newEmployeeAddressesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Address) predicate.Address {
	return predicate.Address(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Address) predicate.Address {
	return predicate.Address(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Address) predicate.Address {
	return predicate.Address(sql.NotPredicates(p))
}
