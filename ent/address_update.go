// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/bug/ent/address"
	"entgo.io/bug/ent/company"
	"entgo.io/bug/ent/companyaddress"
	"entgo.io/bug/ent/employee"
	"entgo.io/bug/ent/employeeaddress"
	"entgo.io/bug/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AddressUpdate is the builder for updating Address entities.
type AddressUpdate struct {
	config
	hooks    []Hook
	mutation *AddressMutation
}

// Where appends a list predicates to the AddressUpdate builder.
func (au *AddressUpdate) Where(ps ...predicate.Address) *AddressUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetStreet sets the "street" field.
func (au *AddressUpdate) SetStreet(s string) *AddressUpdate {
	au.mutation.SetStreet(s)
	return au
}

// SetNillableStreet sets the "street" field if the given value is not nil.
func (au *AddressUpdate) SetNillableStreet(s *string) *AddressUpdate {
	if s != nil {
		au.SetStreet(*s)
	}
	return au
}

// SetHouseNumber sets the "house_number" field.
func (au *AddressUpdate) SetHouseNumber(s string) *AddressUpdate {
	au.mutation.SetHouseNumber(s)
	return au
}

// SetNillableHouseNumber sets the "house_number" field if the given value is not nil.
func (au *AddressUpdate) SetNillableHouseNumber(s *string) *AddressUpdate {
	if s != nil {
		au.SetHouseNumber(*s)
	}
	return au
}

// SetPostalCode sets the "postal_code" field.
func (au *AddressUpdate) SetPostalCode(s string) *AddressUpdate {
	au.mutation.SetPostalCode(s)
	return au
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (au *AddressUpdate) SetNillablePostalCode(s *string) *AddressUpdate {
	if s != nil {
		au.SetPostalCode(*s)
	}
	return au
}

// SetCity sets the "city" field.
func (au *AddressUpdate) SetCity(s string) *AddressUpdate {
	au.mutation.SetCity(s)
	return au
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (au *AddressUpdate) SetNillableCity(s *string) *AddressUpdate {
	if s != nil {
		au.SetCity(*s)
	}
	return au
}

// AddCompanyIDs adds the "companies" edge to the Company entity by IDs.
func (au *AddressUpdate) AddCompanyIDs(ids ...int) *AddressUpdate {
	au.mutation.AddCompanyIDs(ids...)
	return au
}

// AddCompanies adds the "companies" edges to the Company entity.
func (au *AddressUpdate) AddCompanies(c ...*Company) *AddressUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.AddCompanyIDs(ids...)
}

// AddEmployeeIDs adds the "employees" edge to the Employee entity by IDs.
func (au *AddressUpdate) AddEmployeeIDs(ids ...int) *AddressUpdate {
	au.mutation.AddEmployeeIDs(ids...)
	return au
}

// AddEmployees adds the "employees" edges to the Employee entity.
func (au *AddressUpdate) AddEmployees(e ...*Employee) *AddressUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEmployeeIDs(ids...)
}

// AddCompanyAddressIDs adds the "company_addresses" edge to the CompanyAddress entity by IDs.
func (au *AddressUpdate) AddCompanyAddressIDs(ids ...int) *AddressUpdate {
	au.mutation.AddCompanyAddressIDs(ids...)
	return au
}

// AddCompanyAddresses adds the "company_addresses" edges to the CompanyAddress entity.
func (au *AddressUpdate) AddCompanyAddresses(c ...*CompanyAddress) *AddressUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.AddCompanyAddressIDs(ids...)
}

// AddEmployeeAddressIDs adds the "employee_addresses" edge to the EmployeeAddress entity by IDs.
func (au *AddressUpdate) AddEmployeeAddressIDs(ids ...int) *AddressUpdate {
	au.mutation.AddEmployeeAddressIDs(ids...)
	return au
}

// AddEmployeeAddresses adds the "employee_addresses" edges to the EmployeeAddress entity.
func (au *AddressUpdate) AddEmployeeAddresses(e ...*EmployeeAddress) *AddressUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEmployeeAddressIDs(ids...)
}

// Mutation returns the AddressMutation object of the builder.
func (au *AddressUpdate) Mutation() *AddressMutation {
	return au.mutation
}

// ClearCompanies clears all "companies" edges to the Company entity.
func (au *AddressUpdate) ClearCompanies() *AddressUpdate {
	au.mutation.ClearCompanies()
	return au
}

// RemoveCompanyIDs removes the "companies" edge to Company entities by IDs.
func (au *AddressUpdate) RemoveCompanyIDs(ids ...int) *AddressUpdate {
	au.mutation.RemoveCompanyIDs(ids...)
	return au
}

// RemoveCompanies removes "companies" edges to Company entities.
func (au *AddressUpdate) RemoveCompanies(c ...*Company) *AddressUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.RemoveCompanyIDs(ids...)
}

// ClearEmployees clears all "employees" edges to the Employee entity.
func (au *AddressUpdate) ClearEmployees() *AddressUpdate {
	au.mutation.ClearEmployees()
	return au
}

// RemoveEmployeeIDs removes the "employees" edge to Employee entities by IDs.
func (au *AddressUpdate) RemoveEmployeeIDs(ids ...int) *AddressUpdate {
	au.mutation.RemoveEmployeeIDs(ids...)
	return au
}

// RemoveEmployees removes "employees" edges to Employee entities.
func (au *AddressUpdate) RemoveEmployees(e ...*Employee) *AddressUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEmployeeIDs(ids...)
}

// ClearCompanyAddresses clears all "company_addresses" edges to the CompanyAddress entity.
func (au *AddressUpdate) ClearCompanyAddresses() *AddressUpdate {
	au.mutation.ClearCompanyAddresses()
	return au
}

// RemoveCompanyAddressIDs removes the "company_addresses" edge to CompanyAddress entities by IDs.
func (au *AddressUpdate) RemoveCompanyAddressIDs(ids ...int) *AddressUpdate {
	au.mutation.RemoveCompanyAddressIDs(ids...)
	return au
}

// RemoveCompanyAddresses removes "company_addresses" edges to CompanyAddress entities.
func (au *AddressUpdate) RemoveCompanyAddresses(c ...*CompanyAddress) *AddressUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.RemoveCompanyAddressIDs(ids...)
}

// ClearEmployeeAddresses clears all "employee_addresses" edges to the EmployeeAddress entity.
func (au *AddressUpdate) ClearEmployeeAddresses() *AddressUpdate {
	au.mutation.ClearEmployeeAddresses()
	return au
}

// RemoveEmployeeAddressIDs removes the "employee_addresses" edge to EmployeeAddress entities by IDs.
func (au *AddressUpdate) RemoveEmployeeAddressIDs(ids ...int) *AddressUpdate {
	au.mutation.RemoveEmployeeAddressIDs(ids...)
	return au
}

// RemoveEmployeeAddresses removes "employee_addresses" edges to EmployeeAddress entities.
func (au *AddressUpdate) RemoveEmployeeAddresses(e ...*EmployeeAddress) *AddressUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEmployeeAddressIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AddressUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AddressUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AddressUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AddressUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AddressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(address.Table, address.Columns, sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Street(); ok {
		_spec.SetField(address.FieldStreet, field.TypeString, value)
	}
	if value, ok := au.mutation.HouseNumber(); ok {
		_spec.SetField(address.FieldHouseNumber, field.TypeString, value)
	}
	if value, ok := au.mutation.PostalCode(); ok {
		_spec.SetField(address.FieldPostalCode, field.TypeString, value)
	}
	if value, ok := au.mutation.City(); ok {
		_spec.SetField(address.FieldCity, field.TypeString, value)
	}
	if au.mutation.CompaniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   address.CompaniesTable,
			Columns: address.CompaniesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedCompaniesIDs(); len(nodes) > 0 && !au.mutation.CompaniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   address.CompaniesTable,
			Columns: address.CompaniesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CompaniesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   address.CompaniesTable,
			Columns: address.CompaniesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EmployeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   address.EmployeesTable,
			Columns: address.EmployeesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEmployeesIDs(); len(nodes) > 0 && !au.mutation.EmployeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   address.EmployeesTable,
			Columns: address.EmployeesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EmployeesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   address.EmployeesTable,
			Columns: address.EmployeesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CompanyAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.CompanyAddressesTable,
			Columns: []string{address.CompanyAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedCompanyAddressesIDs(); len(nodes) > 0 && !au.mutation.CompanyAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.CompanyAddressesTable,
			Columns: []string{address.CompanyAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CompanyAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.CompanyAddressesTable,
			Columns: []string{address.CompanyAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EmployeeAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.EmployeeAddressesTable,
			Columns: []string{address.EmployeeAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeeaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEmployeeAddressesIDs(); len(nodes) > 0 && !au.mutation.EmployeeAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.EmployeeAddressesTable,
			Columns: []string{address.EmployeeAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeeaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EmployeeAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.EmployeeAddressesTable,
			Columns: []string{address.EmployeeAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeeaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{address.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AddressUpdateOne is the builder for updating a single Address entity.
type AddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AddressMutation
}

// SetStreet sets the "street" field.
func (auo *AddressUpdateOne) SetStreet(s string) *AddressUpdateOne {
	auo.mutation.SetStreet(s)
	return auo
}

// SetNillableStreet sets the "street" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableStreet(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetStreet(*s)
	}
	return auo
}

// SetHouseNumber sets the "house_number" field.
func (auo *AddressUpdateOne) SetHouseNumber(s string) *AddressUpdateOne {
	auo.mutation.SetHouseNumber(s)
	return auo
}

// SetNillableHouseNumber sets the "house_number" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableHouseNumber(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetHouseNumber(*s)
	}
	return auo
}

// SetPostalCode sets the "postal_code" field.
func (auo *AddressUpdateOne) SetPostalCode(s string) *AddressUpdateOne {
	auo.mutation.SetPostalCode(s)
	return auo
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillablePostalCode(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetPostalCode(*s)
	}
	return auo
}

// SetCity sets the "city" field.
func (auo *AddressUpdateOne) SetCity(s string) *AddressUpdateOne {
	auo.mutation.SetCity(s)
	return auo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableCity(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetCity(*s)
	}
	return auo
}

// AddCompanyIDs adds the "companies" edge to the Company entity by IDs.
func (auo *AddressUpdateOne) AddCompanyIDs(ids ...int) *AddressUpdateOne {
	auo.mutation.AddCompanyIDs(ids...)
	return auo
}

// AddCompanies adds the "companies" edges to the Company entity.
func (auo *AddressUpdateOne) AddCompanies(c ...*Company) *AddressUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.AddCompanyIDs(ids...)
}

// AddEmployeeIDs adds the "employees" edge to the Employee entity by IDs.
func (auo *AddressUpdateOne) AddEmployeeIDs(ids ...int) *AddressUpdateOne {
	auo.mutation.AddEmployeeIDs(ids...)
	return auo
}

// AddEmployees adds the "employees" edges to the Employee entity.
func (auo *AddressUpdateOne) AddEmployees(e ...*Employee) *AddressUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEmployeeIDs(ids...)
}

// AddCompanyAddressIDs adds the "company_addresses" edge to the CompanyAddress entity by IDs.
func (auo *AddressUpdateOne) AddCompanyAddressIDs(ids ...int) *AddressUpdateOne {
	auo.mutation.AddCompanyAddressIDs(ids...)
	return auo
}

// AddCompanyAddresses adds the "company_addresses" edges to the CompanyAddress entity.
func (auo *AddressUpdateOne) AddCompanyAddresses(c ...*CompanyAddress) *AddressUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.AddCompanyAddressIDs(ids...)
}

// AddEmployeeAddressIDs adds the "employee_addresses" edge to the EmployeeAddress entity by IDs.
func (auo *AddressUpdateOne) AddEmployeeAddressIDs(ids ...int) *AddressUpdateOne {
	auo.mutation.AddEmployeeAddressIDs(ids...)
	return auo
}

// AddEmployeeAddresses adds the "employee_addresses" edges to the EmployeeAddress entity.
func (auo *AddressUpdateOne) AddEmployeeAddresses(e ...*EmployeeAddress) *AddressUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEmployeeAddressIDs(ids...)
}

// Mutation returns the AddressMutation object of the builder.
func (auo *AddressUpdateOne) Mutation() *AddressMutation {
	return auo.mutation
}

// ClearCompanies clears all "companies" edges to the Company entity.
func (auo *AddressUpdateOne) ClearCompanies() *AddressUpdateOne {
	auo.mutation.ClearCompanies()
	return auo
}

// RemoveCompanyIDs removes the "companies" edge to Company entities by IDs.
func (auo *AddressUpdateOne) RemoveCompanyIDs(ids ...int) *AddressUpdateOne {
	auo.mutation.RemoveCompanyIDs(ids...)
	return auo
}

// RemoveCompanies removes "companies" edges to Company entities.
func (auo *AddressUpdateOne) RemoveCompanies(c ...*Company) *AddressUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.RemoveCompanyIDs(ids...)
}

// ClearEmployees clears all "employees" edges to the Employee entity.
func (auo *AddressUpdateOne) ClearEmployees() *AddressUpdateOne {
	auo.mutation.ClearEmployees()
	return auo
}

// RemoveEmployeeIDs removes the "employees" edge to Employee entities by IDs.
func (auo *AddressUpdateOne) RemoveEmployeeIDs(ids ...int) *AddressUpdateOne {
	auo.mutation.RemoveEmployeeIDs(ids...)
	return auo
}

// RemoveEmployees removes "employees" edges to Employee entities.
func (auo *AddressUpdateOne) RemoveEmployees(e ...*Employee) *AddressUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEmployeeIDs(ids...)
}

// ClearCompanyAddresses clears all "company_addresses" edges to the CompanyAddress entity.
func (auo *AddressUpdateOne) ClearCompanyAddresses() *AddressUpdateOne {
	auo.mutation.ClearCompanyAddresses()
	return auo
}

// RemoveCompanyAddressIDs removes the "company_addresses" edge to CompanyAddress entities by IDs.
func (auo *AddressUpdateOne) RemoveCompanyAddressIDs(ids ...int) *AddressUpdateOne {
	auo.mutation.RemoveCompanyAddressIDs(ids...)
	return auo
}

// RemoveCompanyAddresses removes "company_addresses" edges to CompanyAddress entities.
func (auo *AddressUpdateOne) RemoveCompanyAddresses(c ...*CompanyAddress) *AddressUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.RemoveCompanyAddressIDs(ids...)
}

// ClearEmployeeAddresses clears all "employee_addresses" edges to the EmployeeAddress entity.
func (auo *AddressUpdateOne) ClearEmployeeAddresses() *AddressUpdateOne {
	auo.mutation.ClearEmployeeAddresses()
	return auo
}

// RemoveEmployeeAddressIDs removes the "employee_addresses" edge to EmployeeAddress entities by IDs.
func (auo *AddressUpdateOne) RemoveEmployeeAddressIDs(ids ...int) *AddressUpdateOne {
	auo.mutation.RemoveEmployeeAddressIDs(ids...)
	return auo
}

// RemoveEmployeeAddresses removes "employee_addresses" edges to EmployeeAddress entities.
func (auo *AddressUpdateOne) RemoveEmployeeAddresses(e ...*EmployeeAddress) *AddressUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEmployeeAddressIDs(ids...)
}

// Where appends a list predicates to the AddressUpdate builder.
func (auo *AddressUpdateOne) Where(ps ...predicate.Address) *AddressUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AddressUpdateOne) Select(field string, fields ...string) *AddressUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Address entity.
func (auo *AddressUpdateOne) Save(ctx context.Context) (*Address, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AddressUpdateOne) SaveX(ctx context.Context) *Address {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AddressUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AddressUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AddressUpdateOne) sqlSave(ctx context.Context) (_node *Address, err error) {
	_spec := sqlgraph.NewUpdateSpec(address.Table, address.Columns, sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Address.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, address.FieldID)
		for _, f := range fields {
			if !address.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != address.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Street(); ok {
		_spec.SetField(address.FieldStreet, field.TypeString, value)
	}
	if value, ok := auo.mutation.HouseNumber(); ok {
		_spec.SetField(address.FieldHouseNumber, field.TypeString, value)
	}
	if value, ok := auo.mutation.PostalCode(); ok {
		_spec.SetField(address.FieldPostalCode, field.TypeString, value)
	}
	if value, ok := auo.mutation.City(); ok {
		_spec.SetField(address.FieldCity, field.TypeString, value)
	}
	if auo.mutation.CompaniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   address.CompaniesTable,
			Columns: address.CompaniesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedCompaniesIDs(); len(nodes) > 0 && !auo.mutation.CompaniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   address.CompaniesTable,
			Columns: address.CompaniesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CompaniesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   address.CompaniesTable,
			Columns: address.CompaniesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EmployeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   address.EmployeesTable,
			Columns: address.EmployeesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEmployeesIDs(); len(nodes) > 0 && !auo.mutation.EmployeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   address.EmployeesTable,
			Columns: address.EmployeesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EmployeesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   address.EmployeesTable,
			Columns: address.EmployeesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CompanyAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.CompanyAddressesTable,
			Columns: []string{address.CompanyAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedCompanyAddressesIDs(); len(nodes) > 0 && !auo.mutation.CompanyAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.CompanyAddressesTable,
			Columns: []string{address.CompanyAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CompanyAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.CompanyAddressesTable,
			Columns: []string{address.CompanyAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EmployeeAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.EmployeeAddressesTable,
			Columns: []string{address.EmployeeAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeeaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEmployeeAddressesIDs(); len(nodes) > 0 && !auo.mutation.EmployeeAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.EmployeeAddressesTable,
			Columns: []string{address.EmployeeAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeeaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EmployeeAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.EmployeeAddressesTable,
			Columns: []string{address.EmployeeAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeeaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Address{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{address.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
