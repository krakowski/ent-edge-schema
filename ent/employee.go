// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/bug/ent/employee"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Employee is the model entity for the Employee schema.
type Employee struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Firstname holds the value of the "firstname" field.
	Firstname string `json:"firstname,omitempty"`
	// Lastname holds the value of the "lastname" field.
	Lastname string `json:"lastname,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmployeeQuery when eager-loading is set.
	Edges        EmployeeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EmployeeEdges holds the relations/edges for other nodes in the graph.
type EmployeeEdges struct {
	// Address holds the value of the address edge.
	Address []*Address `json:"address,omitempty"`
	// EmployeeAddresses holds the value of the employee_addresses edge.
	EmployeeAddresses []*EmployeeAddress `json:"employee_addresses,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AddressOrErr returns the Address value or an error if the edge
// was not loaded in eager-loading.
func (e EmployeeEdges) AddressOrErr() ([]*Address, error) {
	if e.loadedTypes[0] {
		return e.Address, nil
	}
	return nil, &NotLoadedError{edge: "address"}
}

// EmployeeAddressesOrErr returns the EmployeeAddresses value or an error if the edge
// was not loaded in eager-loading.
func (e EmployeeEdges) EmployeeAddressesOrErr() ([]*EmployeeAddress, error) {
	if e.loadedTypes[1] {
		return e.EmployeeAddresses, nil
	}
	return nil, &NotLoadedError{edge: "employee_addresses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Employee) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case employee.FieldID:
			values[i] = new(sql.NullInt64)
		case employee.FieldFirstname, employee.FieldLastname:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Employee fields.
func (e *Employee) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case employee.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case employee.FieldFirstname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field firstname", values[i])
			} else if value.Valid {
				e.Firstname = value.String
			}
		case employee.FieldLastname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lastname", values[i])
			} else if value.Valid {
				e.Lastname = value.String
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Employee.
// This includes values selected through modifiers, order, etc.
func (e *Employee) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryAddress queries the "address" edge of the Employee entity.
func (e *Employee) QueryAddress() *AddressQuery {
	return NewEmployeeClient(e.config).QueryAddress(e)
}

// QueryEmployeeAddresses queries the "employee_addresses" edge of the Employee entity.
func (e *Employee) QueryEmployeeAddresses() *EmployeeAddressQuery {
	return NewEmployeeClient(e.config).QueryEmployeeAddresses(e)
}

// Update returns a builder for updating this Employee.
// Note that you need to call Employee.Unwrap() before calling this method if this Employee
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Employee) Update() *EmployeeUpdateOne {
	return NewEmployeeClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Employee entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Employee) Unwrap() *Employee {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Employee is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Employee) String() string {
	var builder strings.Builder
	builder.WriteString("Employee(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("firstname=")
	builder.WriteString(e.Firstname)
	builder.WriteString(", ")
	builder.WriteString("lastname=")
	builder.WriteString(e.Lastname)
	builder.WriteByte(')')
	return builder.String()
}

// Employees is a parsable slice of Employee.
type Employees []*Employee
