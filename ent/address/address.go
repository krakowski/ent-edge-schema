// Code generated by ent, DO NOT EDIT.

package address

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the address type in the database.
	Label = "address"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStreet holds the string denoting the street field in the database.
	FieldStreet = "street"
	// FieldHouseNumber holds the string denoting the house_number field in the database.
	FieldHouseNumber = "house_number"
	// FieldPostalCode holds the string denoting the postal_code field in the database.
	FieldPostalCode = "postal_code"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// EdgeCompanies holds the string denoting the companies edge name in mutations.
	EdgeCompanies = "companies"
	// EdgeEmployees holds the string denoting the employees edge name in mutations.
	EdgeEmployees = "employees"
	// EdgeCompanyAddresses holds the string denoting the company_addresses edge name in mutations.
	EdgeCompanyAddresses = "company_addresses"
	// EdgeEmployeeAddresses holds the string denoting the employee_addresses edge name in mutations.
	EdgeEmployeeAddresses = "employee_addresses"
	// Table holds the table name of the address in the database.
	Table = "addresses"
	// CompaniesTable is the table that holds the companies relation/edge. The primary key declared below.
	CompaniesTable = "company_addresses"
	// CompaniesInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	CompaniesInverseTable = "companies"
	// EmployeesTable is the table that holds the employees relation/edge. The primary key declared below.
	EmployeesTable = "employee_addresses"
	// EmployeesInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EmployeesInverseTable = "employees"
	// CompanyAddressesTable is the table that holds the company_addresses relation/edge.
	CompanyAddressesTable = "company_addresses"
	// CompanyAddressesInverseTable is the table name for the CompanyAddress entity.
	// It exists in this package in order to avoid circular dependency with the "companyaddress" package.
	CompanyAddressesInverseTable = "company_addresses"
	// CompanyAddressesColumn is the table column denoting the company_addresses relation/edge.
	CompanyAddressesColumn = "address_id"
	// EmployeeAddressesTable is the table that holds the employee_addresses relation/edge.
	EmployeeAddressesTable = "employee_addresses"
	// EmployeeAddressesInverseTable is the table name for the EmployeeAddress entity.
	// It exists in this package in order to avoid circular dependency with the "employeeaddress" package.
	EmployeeAddressesInverseTable = "employee_addresses"
	// EmployeeAddressesColumn is the table column denoting the employee_addresses relation/edge.
	EmployeeAddressesColumn = "address_id"
)

// Columns holds all SQL columns for address fields.
var Columns = []string{
	FieldID,
	FieldStreet,
	FieldHouseNumber,
	FieldPostalCode,
	FieldCity,
}

var (
	// CompaniesPrimaryKey and CompaniesColumn2 are the table columns denoting the
	// primary key for the companies relation (M2M).
	CompaniesPrimaryKey = []string{"address_id", "company_id"}
	// EmployeesPrimaryKey and EmployeesColumn2 are the table columns denoting the
	// primary key for the employees relation (M2M).
	EmployeesPrimaryKey = []string{"address_id", "employee_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Address queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStreet orders the results by the street field.
func ByStreet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStreet, opts...).ToFunc()
}

// ByHouseNumber orders the results by the house_number field.
func ByHouseNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHouseNumber, opts...).ToFunc()
}

// ByPostalCode orders the results by the postal_code field.
func ByPostalCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostalCode, opts...).ToFunc()
}

// ByCity orders the results by the city field.
func ByCity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCity, opts...).ToFunc()
}

// ByCompaniesCount orders the results by companies count.
func ByCompaniesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCompaniesStep(), opts...)
	}
}

// ByCompanies orders the results by companies terms.
func ByCompanies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompaniesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEmployeesCount orders the results by employees count.
func ByEmployeesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEmployeesStep(), opts...)
	}
}

// ByEmployees orders the results by employees terms.
func ByEmployees(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmployeesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCompanyAddressesCount orders the results by company_addresses count.
func ByCompanyAddressesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCompanyAddressesStep(), opts...)
	}
}

// ByCompanyAddresses orders the results by company_addresses terms.
func ByCompanyAddresses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompanyAddressesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEmployeeAddressesCount orders the results by employee_addresses count.
func ByEmployeeAddressesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEmployeeAddressesStep(), opts...)
	}
}

// ByEmployeeAddresses orders the results by employee_addresses terms.
func ByEmployeeAddresses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmployeeAddressesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCompaniesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompaniesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, CompaniesTable, CompaniesPrimaryKey...),
	)
}
func newEmployeesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmployeesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, EmployeesTable, EmployeesPrimaryKey...),
	)
}
func newCompanyAddressesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompanyAddressesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, CompanyAddressesTable, CompanyAddressesColumn),
	)
}
func newEmployeeAddressesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmployeeAddressesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, EmployeeAddressesTable, EmployeeAddressesColumn),
	)
}
